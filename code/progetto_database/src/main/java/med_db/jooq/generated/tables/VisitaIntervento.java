/*
 * This file is generated by jOOQ.
 */
package med_db.jooq.generated.tables;


import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import med_db.jooq.generated.DefaultSchema;
import med_db.jooq.generated.Keys;
import med_db.jooq.generated.tables.records.VisitaInterventoRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VisitaIntervento extends TableImpl<VisitaInterventoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>VISITA_INTERVENTO</code>
     */
    public static final VisitaIntervento VISITA_INTERVENTO = new VisitaIntervento();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VisitaInterventoRecord> getRecordType() {
        return VisitaInterventoRecord.class;
    }

    /**
     * The column <code>VISITA_INTERVENTO.ID</code>.
     */
    public final TableField<VisitaInterventoRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>VISITA_INTERVENTO.TIPO</code>.
     */
    public final TableField<VisitaInterventoRecord, String> TIPO = createField(DSL.name("TIPO"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>VISITA_INTERVENTO.CODICE_DEGENTE</code>.
     */
    public final TableField<VisitaInterventoRecord, String> CODICE_DEGENTE = createField(DSL.name("CODICE_DEGENTE"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>VISITA_INTERVENTO.COUNT_DEGENTE</code>.
     */
    public final TableField<VisitaInterventoRecord, Integer> COUNT_DEGENTE = createField(DSL.name("COUNT_DEGENTE"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>VISITA_INTERVENTO.CODICE_MEDICO</code>.
     */
    public final TableField<VisitaInterventoRecord, String> CODICE_MEDICO = createField(DSL.name("CODICE_MEDICO"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>VISITA_INTERVENTO.MOTIVO</code>.
     */
    public final TableField<VisitaInterventoRecord, String> MOTIVO = createField(DSL.name("MOTIVO"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>VISITA_INTERVENTO.DATA_PRENOTAZIONE</code>.
     */
    public final TableField<VisitaInterventoRecord, LocalDate> DATA_PRENOTAZIONE = createField(DSL.name("DATA_PRENOTAZIONE"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>VISITA_INTERVENTO.ORA_PRENOTAZIONE</code>.
     */
    public final TableField<VisitaInterventoRecord, LocalTime> ORA_PRENOTAZIONE = createField(DSL.name("ORA_PRENOTAZIONE"), SQLDataType.LOCALTIME, this, "");

    private VisitaIntervento(Name alias, Table<VisitaInterventoRecord> aliased) {
        this(alias, aliased, null);
    }

    private VisitaIntervento(Name alias, Table<VisitaInterventoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>VISITA_INTERVENTO</code> table reference
     */
    public VisitaIntervento(String alias) {
        this(DSL.name(alias), VISITA_INTERVENTO);
    }

    /**
     * Create an aliased <code>VISITA_INTERVENTO</code> table reference
     */
    public VisitaIntervento(Name alias) {
        this(alias, VISITA_INTERVENTO);
    }

    /**
     * Create a <code>VISITA_INTERVENTO</code> table reference
     */
    public VisitaIntervento() {
        this(DSL.name("VISITA_INTERVENTO"), null);
    }

    public <O extends Record> VisitaIntervento(Table<O> child, ForeignKey<O, VisitaInterventoRecord> key) {
        super(child, key, VISITA_INTERVENTO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<VisitaInterventoRecord> getPrimaryKey() {
        return Keys.VISITA_INTERVENTO__PK_VISITA_INTERVENTO;
    }

    @Override
    public List<ForeignKey<VisitaInterventoRecord, ?>> getReferences() {
        return Arrays.asList(Keys.VISITA_INTERVENTO__FK_VISITA_INTERVENTO_PK_DEGENTE);
    }

    private transient Degente _degente;

    /**
     * Get the implicit join path to the <code>DEGENTE</code> table.
     */
    public Degente degente() {
        if (_degente == null)
            _degente = new Degente(this, Keys.VISITA_INTERVENTO__FK_VISITA_INTERVENTO_PK_DEGENTE);

        return _degente;
    }

    @Override
    public VisitaIntervento as(String alias) {
        return new VisitaIntervento(DSL.name(alias), this);
    }

    @Override
    public VisitaIntervento as(Name alias) {
        return new VisitaIntervento(alias, this);
    }

    @Override
    public VisitaIntervento as(Table<?> alias) {
        return new VisitaIntervento(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public VisitaIntervento rename(String name) {
        return new VisitaIntervento(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VisitaIntervento rename(Name name) {
        return new VisitaIntervento(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public VisitaIntervento rename(Table<?> name) {
        return new VisitaIntervento(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, Integer, String, String, LocalDate, LocalTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Integer, ? super String, ? super String, ? super Integer, ? super String, ? super String, ? super LocalDate, ? super LocalTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Integer, ? super String, ? super String, ? super Integer, ? super String, ? super String, ? super LocalDate, ? super LocalTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
